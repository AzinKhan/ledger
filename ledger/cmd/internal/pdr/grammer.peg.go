package pdr

// Code generated by peg -inline -switch grammer.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleExpr
	ruleNOW
	rulePAST
	ruleFUTURE
	ruleALLTIME
	ruleNumber
	ruleYEARS
	ruleMONTHS
	ruleQUARTERS
	ruleLAST
	ruleCURRENT
	ruleTODATE
	ruleNEXT
	rule_
	ruleWhitespace
	ruleEOL
	ruleEOF
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	rulePegText
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"Expr",
	"NOW",
	"PAST",
	"FUTURE",
	"ALLTIME",
	"Number",
	"YEARS",
	"MONTHS",
	"QUARTERS",
	"LAST",
	"CURRENT",
	"TODATE",
	"NEXT",
	"_",
	"Whitespace",
	"EOL",
	"EOF",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"PegText",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	currentTime time.Time
	start       time.Time
	end         time.Time
	number      int

	Buffer string
	buffer []rune
	rules  [50]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.start = time.Date(p.currentTime.Year(), time.January, 1, 0, 0, 0, 0, time.UTC)
			p.end = time.Date(p.currentTime.Year()+1, time.January, 1, 0, 0, 0, 0, time.UTC)

		case ruleAction1:

			p.start = time.Date(p.currentTime.Year(), p.currentTime.Month(), 1, 0, 0, 0, 0, time.UTC)
			p.end = time.Date(p.currentTime.Year(), p.currentTime.Month()+1, 1, 0, 0, 0, 0, time.UTC)

		case ruleAction2:

			if p.number > 0 {
				p.start = time.Date(p.currentTime.Year()-(p.number-1), time.January, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year()+1, time.January, 1, 0, 0, 0, 0, time.UTC)
			} else {
				p.start = time.Date(p.currentTime.Year()-1, time.January, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.January, 1, 0, 0, 0, 0, time.UTC)
			}

		case ruleAction3:

			if p.number > 0 {
				p.start = time.Date(p.currentTime.Year(), p.currentTime.Month()-time.Month(p.number-1), 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), p.currentTime.Month()+1, 1, 0, 0, 0, 0, time.UTC)
			} else {
				p.start = time.Date(p.currentTime.Year(), p.currentTime.Month()-1, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), p.currentTime.Month(), 1, 0, 0, 0, 0, time.UTC)
			}

		case ruleAction4:

			var startoff, endoff time.Month
			if p.number > 1 {
				startoff = time.Month((p.number - 2) * -3)
				endoff = time.Month(3)
			}
			switch p.currentTime.Month() {
			case time.January, time.February, time.March:
				p.start = time.Date(p.currentTime.Year()-1, time.October+startoff, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.January+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.April, time.May, time.June:
				p.start = time.Date(p.currentTime.Year(), time.January+startoff, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.April+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.July, time.August, time.September:
				p.start = time.Date(p.currentTime.Year(), time.April+startoff, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.July+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.October, time.November, time.December:
				p.start = time.Date(p.currentTime.Year(), time.July+startoff, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.October+endoff, 1, 0, 0, 0, 0, time.UTC)
			}

		case ruleAction5:

			if p.number > 0 {
				p.start = time.Date(p.currentTime.Year(), time.January, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year()+((p.number-1)+1), time.January, 1, 0, 0, 0, 0, time.UTC)
			} else {
				p.start = time.Date(p.currentTime.Year()+1, time.January, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year()+2, time.January, 1, 0, 0, 0, 0, time.UTC)
			}

		case ruleAction6:

			if p.number > 0 {
				p.start = time.Date(p.currentTime.Year(), p.currentTime.Month()+time.Month(1), 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), p.currentTime.Month()+time.Month((p.number-1)+1), 1, 0, 0, 0, 0, time.UTC)
			} else {
				p.start = time.Date(p.currentTime.Year(), p.currentTime.Month()+time.Month(1), 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), p.currentTime.Month()+time.Month(2), 1, 0, 0, 0, 0, time.UTC)
			}

		case ruleAction7:

			var endoff time.Month
			if p.number > 1 {
				endoff = time.Month(3 * (p.number - 2))
			}
			switch p.currentTime.Month() {
			case time.January, time.February, time.March:
				p.start = time.Date(p.currentTime.Year(), time.January, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.April+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.April, time.May, time.June:
				p.start = time.Date(p.currentTime.Year(), time.April, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.July+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.July, time.August, time.September:
				p.start = time.Date(p.currentTime.Year(), time.July, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.October+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.October, time.November, time.December:
				p.start = time.Date(p.currentTime.Year(), time.October, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year()+1, time.January+endoff, 1, 0, 0, 0, 0, time.UTC)
			}

		case ruleAction8:

			p.start = time.Time{}
			p.end = p.currentTime.Add(1<<63 - 1)

		case ruleAction9:
			n, _ := strconv.Atoi(text)
			p.number = n
		case ruleAction10:
			p.number = 1
		case ruleAction11:
			p.number = 2
		case ruleAction12:
			p.number = 3
		case ruleAction13:
			p.number = 4
		case ruleAction14:
			p.number = 5
		case ruleAction15:
			p.number = 6
		case ruleAction16:
			p.number = 7
		case ruleAction17:
			p.number = 8
		case ruleAction18:
			p.number = 9
		case ruleAction19:
			p.number = 10
		case ruleAction20:
			p.number = 11
		case ruleAction21:
			p.number = 12
		case ruleAction22:
			p.number = 13
		case ruleAction23:
			p.number = 14
		case ruleAction24:
			p.number = 15
		case ruleAction25:
			p.number = 16
		case ruleAction26:
			p.number = 17
		case ruleAction27:
			p.number = 18
		case ruleAction28:
			p.number = 19
		case ruleAction29:
			p.number = 20

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(Expr EOF)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					{
						position3, tokenIndex3 := position, tokenIndex
						{
							position5 := position
							{
								position6, tokenIndex6 := position, tokenIndex
								{
									position8, tokenIndex8 := position, tokenIndex
									if !_rules[ruleCURRENT]() {
										goto l9
									}
									if !_rules[ruleYEARS]() {
										goto l9
									}
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleYEARS]() {
										goto l10
									}
									if !_rules[ruleTODATE]() {
										goto l10
									}
									goto l8
								l10:
									position, tokenIndex = position8, tokenIndex8
									if buffer[position] != rune('y') {
										goto l7
									}
									position++
									if buffer[position] != rune('t') {
										goto l7
									}
									position++
									if buffer[position] != rune('d') {
										goto l7
									}
									position++
									if !_rules[rule_]() {
										goto l7
									}
								}
							l8:
								{
									add(ruleAction0, position)
								}
								goto l6
							l7:
								position, tokenIndex = position6, tokenIndex6
								{
									position12, tokenIndex12 := position, tokenIndex
									if !_rules[ruleCURRENT]() {
										goto l13
									}
									if !_rules[ruleMONTHS]() {
										goto l13
									}
									goto l12
								l13:
									position, tokenIndex = position12, tokenIndex12
									if !_rules[ruleMONTHS]() {
										goto l14
									}
									if !_rules[ruleTODATE]() {
										goto l14
									}
									goto l12
								l14:
									position, tokenIndex = position12, tokenIndex12
									if buffer[position] != rune('m') {
										goto l4
									}
									position++
									if buffer[position] != rune('t') {
										goto l4
									}
									position++
									if buffer[position] != rune('d') {
										goto l4
									}
									position++
									if !_rules[rule_]() {
										goto l4
									}
								}
							l12:
								{
									add(ruleAction1, position)
								}
							}
						l6:
							add(ruleNOW, position5)
						}
						goto l3
					l4:
						position, tokenIndex = position3, tokenIndex3
						{
							switch buffer[position] {
							case 'a':
								{
									position17 := position
									if buffer[position] != rune('a') {
										goto l0
									}
									position++
									if buffer[position] != rune('l') {
										goto l0
									}
									position++
									if buffer[position] != rune('l') {
										goto l0
									}
									position++
									if buffer[position] != rune(' ') {
										goto l0
									}
									position++
									if buffer[position] != rune('t') {
										goto l0
									}
									position++
									if buffer[position] != rune('i') {
										goto l0
									}
									position++
									if buffer[position] != rune('m') {
										goto l0
									}
									position++
									if buffer[position] != rune('e') {
										goto l0
									}
									position++
									if !_rules[rule_]() {
										goto l0
									}
									{
										add(ruleAction8, position)
									}
									add(ruleALLTIME, position17)
								}
							case 'c', 'n':
								{
									position19 := position
									{
										position20, tokenIndex20 := position, tokenIndex
										if !_rules[ruleNEXT]() {
											goto l21
										}
										{
											position22, tokenIndex22 := position, tokenIndex
											if !_rules[ruleNumber]() {
												goto l22
											}
											goto l23
										l22:
											position, tokenIndex = position22, tokenIndex22
										}
									l23:
										if !_rules[ruleYEARS]() {
											goto l21
										}
										{
											add(ruleAction5, position)
										}
										goto l20
									l21:
										position, tokenIndex = position20, tokenIndex20
										if !_rules[ruleNEXT]() {
											goto l25
										}
										{
											position26, tokenIndex26 := position, tokenIndex
											if !_rules[ruleNumber]() {
												goto l26
											}
											goto l27
										l26:
											position, tokenIndex = position26, tokenIndex26
										}
									l27:
										if !_rules[ruleMONTHS]() {
											goto l25
										}
										{
											add(ruleAction6, position)
										}
										goto l20
									l25:
										position, tokenIndex = position20, tokenIndex20
										if !_rules[ruleNEXT]() {
											goto l0
										}
										{
											position29, tokenIndex29 := position, tokenIndex
											if !_rules[ruleNumber]() {
												goto l29
											}
											goto l30
										l29:
											position, tokenIndex = position29, tokenIndex29
										}
									l30:
										if !_rules[ruleQUARTERS]() {
											goto l0
										}
										{
											add(ruleAction7, position)
										}
									}
								l20:
									add(ruleFUTURE, position19)
								}
							default:
								{
									position32 := position
									{
										position33, tokenIndex33 := position, tokenIndex
										if !_rules[ruleLAST]() {
											goto l34
										}
										{
											position35, tokenIndex35 := position, tokenIndex
											if !_rules[ruleNumber]() {
												goto l35
											}
											goto l36
										l35:
											position, tokenIndex = position35, tokenIndex35
										}
									l36:
										if !_rules[ruleYEARS]() {
											goto l34
										}
										{
											add(ruleAction2, position)
										}
										goto l33
									l34:
										position, tokenIndex = position33, tokenIndex33
										if !_rules[ruleLAST]() {
											goto l38
										}
										{
											position39, tokenIndex39 := position, tokenIndex
											if !_rules[ruleNumber]() {
												goto l39
											}
											goto l40
										l39:
											position, tokenIndex = position39, tokenIndex39
										}
									l40:
										if !_rules[ruleMONTHS]() {
											goto l38
										}
										{
											add(ruleAction3, position)
										}
										goto l33
									l38:
										position, tokenIndex = position33, tokenIndex33
										if !_rules[ruleLAST]() {
											goto l0
										}
										{
											position42, tokenIndex42 := position, tokenIndex
											if !_rules[ruleNumber]() {
												goto l42
											}
											goto l43
										l42:
											position, tokenIndex = position42, tokenIndex42
										}
									l43:
										if !_rules[ruleQUARTERS]() {
											goto l0
										}
										{
											add(ruleAction4, position)
										}
									}
								l33:
									add(rulePAST, position32)
								}
							}
						}

					}
				l3:
					add(ruleExpr, position2)
				}
				{
					position45 := position
					{
						position46, tokenIndex46 := position, tokenIndex
						if !matchDot() {
							goto l46
						}
						goto l0
					l46:
						position, tokenIndex = position46, tokenIndex46
					}
					add(ruleEOF, position45)
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expr <- <(NOW / ((&('a') ALLTIME) | (&('c' | 'n') FUTURE) | (&('l' | 'p') PAST)))> */
		nil,
		/* 2 NOW <- <((((CURRENT YEARS) / (YEARS TODATE) / ('y' 't' 'd' _)) Action0) / (((CURRENT MONTHS) / (MONTHS TODATE) / ('m' 't' 'd' _)) Action1))> */
		nil,
		/* 3 PAST <- <((LAST Number? YEARS Action2) / (LAST Number? MONTHS Action3) / (LAST Number? QUARTERS Action4))> */
		nil,
		/* 4 FUTURE <- <((NEXT Number? YEARS Action5) / (NEXT Number? MONTHS Action6) / (NEXT Number? QUARTERS Action7))> */
		nil,
		/* 5 ALLTIME <- <('a' 'l' 'l' ' ' 't' 'i' 'm' 'e' _ Action8)> */
		nil,
		/* 6 Number <- <(('t' 'w' 'o' _ Action11) / ('t' 'h' 'r' 'e' 'e' _ Action12) / ('f' 'o' 'u' 'r' _ Action13) / ('f' 'i' 'v' 'e' _ Action14) / ('s' 'i' 'x' _ Action15) / ('s' 'e' 'v' 'e' 'n' _ Action16) / ('e' 'i' 'g' 'h' 't' _ Action17) / ('n' 'i' 'n' 'e' _ Action18) / ('t' 'e' 'n' _ Action19) / ('e' 'l' 'e' 'v' 'e' 'n' _ Action20) / ('t' 'w' 'e' 'l' 'v' 'e' _ Action21) / ('t' 'h' 'i' 'r' 't' 'e' 'e' 'n' _ Action22) / ('f' 'o' 'u' 'r' 't' 'e' 'e' 'n' _ Action23) / ('s' 'i' 'x' 't' 'e' 'e' 'n' _ Action25) / ((&('t') ('t' 'w' 'e' 'n' 't' 'y' _ Action29)) | (&('n') ('n' 'i' 'n' 'e' 't' 'e' 'e' 'n' _ Action28)) | (&('e') ('e' 'i' 'g' 'h' 't' 't' 'e' 'e' 'n' _ Action27)) | (&('s') ('s' 'e' 'v' 'e' 'n' 't' 'e' 'e' 'n' _ Action26)) | (&('f') ('f' 'i' 'f' 't' 'e' 'e' 'n' _ Action24)) | (&('o') ('o' 'n' 'e' _ Action10)) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') (<[0-9]+> _ Action9))))> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				{
					position54, tokenIndex54 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l55
					}
					position++
					if buffer[position] != rune('w') {
						goto l55
					}
					position++
					if buffer[position] != rune('o') {
						goto l55
					}
					position++
					if !_rules[rule_]() {
						goto l55
					}
					{
						add(ruleAction11, position)
					}
					goto l54
				l55:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('t') {
						goto l57
					}
					position++
					if buffer[position] != rune('h') {
						goto l57
					}
					position++
					if buffer[position] != rune('r') {
						goto l57
					}
					position++
					if buffer[position] != rune('e') {
						goto l57
					}
					position++
					if buffer[position] != rune('e') {
						goto l57
					}
					position++
					if !_rules[rule_]() {
						goto l57
					}
					{
						add(ruleAction12, position)
					}
					goto l54
				l57:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('f') {
						goto l59
					}
					position++
					if buffer[position] != rune('o') {
						goto l59
					}
					position++
					if buffer[position] != rune('u') {
						goto l59
					}
					position++
					if buffer[position] != rune('r') {
						goto l59
					}
					position++
					if !_rules[rule_]() {
						goto l59
					}
					{
						add(ruleAction13, position)
					}
					goto l54
				l59:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('f') {
						goto l61
					}
					position++
					if buffer[position] != rune('i') {
						goto l61
					}
					position++
					if buffer[position] != rune('v') {
						goto l61
					}
					position++
					if buffer[position] != rune('e') {
						goto l61
					}
					position++
					if !_rules[rule_]() {
						goto l61
					}
					{
						add(ruleAction14, position)
					}
					goto l54
				l61:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('s') {
						goto l63
					}
					position++
					if buffer[position] != rune('i') {
						goto l63
					}
					position++
					if buffer[position] != rune('x') {
						goto l63
					}
					position++
					if !_rules[rule_]() {
						goto l63
					}
					{
						add(ruleAction15, position)
					}
					goto l54
				l63:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('s') {
						goto l65
					}
					position++
					if buffer[position] != rune('e') {
						goto l65
					}
					position++
					if buffer[position] != rune('v') {
						goto l65
					}
					position++
					if buffer[position] != rune('e') {
						goto l65
					}
					position++
					if buffer[position] != rune('n') {
						goto l65
					}
					position++
					if !_rules[rule_]() {
						goto l65
					}
					{
						add(ruleAction16, position)
					}
					goto l54
				l65:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('e') {
						goto l67
					}
					position++
					if buffer[position] != rune('i') {
						goto l67
					}
					position++
					if buffer[position] != rune('g') {
						goto l67
					}
					position++
					if buffer[position] != rune('h') {
						goto l67
					}
					position++
					if buffer[position] != rune('t') {
						goto l67
					}
					position++
					if !_rules[rule_]() {
						goto l67
					}
					{
						add(ruleAction17, position)
					}
					goto l54
				l67:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('n') {
						goto l69
					}
					position++
					if buffer[position] != rune('i') {
						goto l69
					}
					position++
					if buffer[position] != rune('n') {
						goto l69
					}
					position++
					if buffer[position] != rune('e') {
						goto l69
					}
					position++
					if !_rules[rule_]() {
						goto l69
					}
					{
						add(ruleAction18, position)
					}
					goto l54
				l69:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('t') {
						goto l71
					}
					position++
					if buffer[position] != rune('e') {
						goto l71
					}
					position++
					if buffer[position] != rune('n') {
						goto l71
					}
					position++
					if !_rules[rule_]() {
						goto l71
					}
					{
						add(ruleAction19, position)
					}
					goto l54
				l71:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('e') {
						goto l73
					}
					position++
					if buffer[position] != rune('l') {
						goto l73
					}
					position++
					if buffer[position] != rune('e') {
						goto l73
					}
					position++
					if buffer[position] != rune('v') {
						goto l73
					}
					position++
					if buffer[position] != rune('e') {
						goto l73
					}
					position++
					if buffer[position] != rune('n') {
						goto l73
					}
					position++
					if !_rules[rule_]() {
						goto l73
					}
					{
						add(ruleAction20, position)
					}
					goto l54
				l73:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('t') {
						goto l75
					}
					position++
					if buffer[position] != rune('w') {
						goto l75
					}
					position++
					if buffer[position] != rune('e') {
						goto l75
					}
					position++
					if buffer[position] != rune('l') {
						goto l75
					}
					position++
					if buffer[position] != rune('v') {
						goto l75
					}
					position++
					if buffer[position] != rune('e') {
						goto l75
					}
					position++
					if !_rules[rule_]() {
						goto l75
					}
					{
						add(ruleAction21, position)
					}
					goto l54
				l75:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('t') {
						goto l77
					}
					position++
					if buffer[position] != rune('h') {
						goto l77
					}
					position++
					if buffer[position] != rune('i') {
						goto l77
					}
					position++
					if buffer[position] != rune('r') {
						goto l77
					}
					position++
					if buffer[position] != rune('t') {
						goto l77
					}
					position++
					if buffer[position] != rune('e') {
						goto l77
					}
					position++
					if buffer[position] != rune('e') {
						goto l77
					}
					position++
					if buffer[position] != rune('n') {
						goto l77
					}
					position++
					if !_rules[rule_]() {
						goto l77
					}
					{
						add(ruleAction22, position)
					}
					goto l54
				l77:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('f') {
						goto l79
					}
					position++
					if buffer[position] != rune('o') {
						goto l79
					}
					position++
					if buffer[position] != rune('u') {
						goto l79
					}
					position++
					if buffer[position] != rune('r') {
						goto l79
					}
					position++
					if buffer[position] != rune('t') {
						goto l79
					}
					position++
					if buffer[position] != rune('e') {
						goto l79
					}
					position++
					if buffer[position] != rune('e') {
						goto l79
					}
					position++
					if buffer[position] != rune('n') {
						goto l79
					}
					position++
					if !_rules[rule_]() {
						goto l79
					}
					{
						add(ruleAction23, position)
					}
					goto l54
				l79:
					position, tokenIndex = position54, tokenIndex54
					if buffer[position] != rune('s') {
						goto l81
					}
					position++
					if buffer[position] != rune('i') {
						goto l81
					}
					position++
					if buffer[position] != rune('x') {
						goto l81
					}
					position++
					if buffer[position] != rune('t') {
						goto l81
					}
					position++
					if buffer[position] != rune('e') {
						goto l81
					}
					position++
					if buffer[position] != rune('e') {
						goto l81
					}
					position++
					if buffer[position] != rune('n') {
						goto l81
					}
					position++
					if !_rules[rule_]() {
						goto l81
					}
					{
						add(ruleAction25, position)
					}
					goto l54
				l81:
					position, tokenIndex = position54, tokenIndex54
					{
						switch buffer[position] {
						case 't':
							if buffer[position] != rune('t') {
								goto l52
							}
							position++
							if buffer[position] != rune('w') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('n') {
								goto l52
							}
							position++
							if buffer[position] != rune('t') {
								goto l52
							}
							position++
							if buffer[position] != rune('y') {
								goto l52
							}
							position++
							if !_rules[rule_]() {
								goto l52
							}
							{
								add(ruleAction29, position)
							}
						case 'n':
							if buffer[position] != rune('n') {
								goto l52
							}
							position++
							if buffer[position] != rune('i') {
								goto l52
							}
							position++
							if buffer[position] != rune('n') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('t') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('n') {
								goto l52
							}
							position++
							if !_rules[rule_]() {
								goto l52
							}
							{
								add(ruleAction28, position)
							}
						case 'e':
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('i') {
								goto l52
							}
							position++
							if buffer[position] != rune('g') {
								goto l52
							}
							position++
							if buffer[position] != rune('h') {
								goto l52
							}
							position++
							if buffer[position] != rune('t') {
								goto l52
							}
							position++
							if buffer[position] != rune('t') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('n') {
								goto l52
							}
							position++
							if !_rules[rule_]() {
								goto l52
							}
							{
								add(ruleAction27, position)
							}
						case 's':
							if buffer[position] != rune('s') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('v') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('n') {
								goto l52
							}
							position++
							if buffer[position] != rune('t') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('n') {
								goto l52
							}
							position++
							if !_rules[rule_]() {
								goto l52
							}
							{
								add(ruleAction26, position)
							}
						case 'f':
							if buffer[position] != rune('f') {
								goto l52
							}
							position++
							if buffer[position] != rune('i') {
								goto l52
							}
							position++
							if buffer[position] != rune('f') {
								goto l52
							}
							position++
							if buffer[position] != rune('t') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if buffer[position] != rune('n') {
								goto l52
							}
							position++
							if !_rules[rule_]() {
								goto l52
							}
							{
								add(ruleAction24, position)
							}
						case 'o':
							if buffer[position] != rune('o') {
								goto l52
							}
							position++
							if buffer[position] != rune('n') {
								goto l52
							}
							position++
							if buffer[position] != rune('e') {
								goto l52
							}
							position++
							if !_rules[rule_]() {
								goto l52
							}
							{
								add(ruleAction10, position)
							}
						default:
							{
								position90 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l52
								}
								position++
							l91:
								{
									position92, tokenIndex92 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l92
									}
									position++
									goto l91
								l92:
									position, tokenIndex = position92, tokenIndex92
								}
								add(rulePegText, position90)
							}
							if !_rules[rule_]() {
								goto l52
							}
							{
								add(ruleAction9, position)
							}
						}
					}

				}
			l54:
				add(ruleNumber, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 7 YEARS <- <('y' 'e' 'a' 'r' 's'? _)> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				if buffer[position] != rune('y') {
					goto l94
				}
				position++
				if buffer[position] != rune('e') {
					goto l94
				}
				position++
				if buffer[position] != rune('a') {
					goto l94
				}
				position++
				if buffer[position] != rune('r') {
					goto l94
				}
				position++
				{
					position96, tokenIndex96 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l96
					}
					position++
					goto l97
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
			l97:
				if !_rules[rule_]() {
					goto l94
				}
				add(ruleYEARS, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 8 MONTHS <- <('m' 'o' 'n' 't' 'h' 's'? _)> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				if buffer[position] != rune('m') {
					goto l98
				}
				position++
				if buffer[position] != rune('o') {
					goto l98
				}
				position++
				if buffer[position] != rune('n') {
					goto l98
				}
				position++
				if buffer[position] != rune('t') {
					goto l98
				}
				position++
				if buffer[position] != rune('h') {
					goto l98
				}
				position++
				{
					position100, tokenIndex100 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l100
					}
					position++
					goto l101
				l100:
					position, tokenIndex = position100, tokenIndex100
				}
			l101:
				if !_rules[rule_]() {
					goto l98
				}
				add(ruleMONTHS, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 9 QUARTERS <- <('q' 'u' 'a' 'r' 't' 'e' 'r' 's'? _)> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				if buffer[position] != rune('q') {
					goto l102
				}
				position++
				if buffer[position] != rune('u') {
					goto l102
				}
				position++
				if buffer[position] != rune('a') {
					goto l102
				}
				position++
				if buffer[position] != rune('r') {
					goto l102
				}
				position++
				if buffer[position] != rune('t') {
					goto l102
				}
				position++
				if buffer[position] != rune('e') {
					goto l102
				}
				position++
				if buffer[position] != rune('r') {
					goto l102
				}
				position++
				{
					position104, tokenIndex104 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l104
					}
					position++
					goto l105
				l104:
					position, tokenIndex = position104, tokenIndex104
				}
			l105:
				if !_rules[rule_]() {
					goto l102
				}
				add(ruleQUARTERS, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 10 LAST <- <((('l' 'a' 's' 't') / ('p' 'r' 'e' 'v' 'i' 'o' 'u' 's') / ('p' 'a' 's' 't')) _)> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				{
					position108, tokenIndex108 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l109
					}
					position++
					if buffer[position] != rune('a') {
						goto l109
					}
					position++
					if buffer[position] != rune('s') {
						goto l109
					}
					position++
					if buffer[position] != rune('t') {
						goto l109
					}
					position++
					goto l108
				l109:
					position, tokenIndex = position108, tokenIndex108
					if buffer[position] != rune('p') {
						goto l110
					}
					position++
					if buffer[position] != rune('r') {
						goto l110
					}
					position++
					if buffer[position] != rune('e') {
						goto l110
					}
					position++
					if buffer[position] != rune('v') {
						goto l110
					}
					position++
					if buffer[position] != rune('i') {
						goto l110
					}
					position++
					if buffer[position] != rune('o') {
						goto l110
					}
					position++
					if buffer[position] != rune('u') {
						goto l110
					}
					position++
					if buffer[position] != rune('s') {
						goto l110
					}
					position++
					goto l108
				l110:
					position, tokenIndex = position108, tokenIndex108
					if buffer[position] != rune('p') {
						goto l106
					}
					position++
					if buffer[position] != rune('a') {
						goto l106
					}
					position++
					if buffer[position] != rune('s') {
						goto l106
					}
					position++
					if buffer[position] != rune('t') {
						goto l106
					}
					position++
				}
			l108:
				if !_rules[rule_]() {
					goto l106
				}
				add(ruleLAST, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 11 CURRENT <- <('c' 'u' 'r' 'r' 'e' 'n' 't' _)> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				if buffer[position] != rune('c') {
					goto l111
				}
				position++
				if buffer[position] != rune('u') {
					goto l111
				}
				position++
				if buffer[position] != rune('r') {
					goto l111
				}
				position++
				if buffer[position] != rune('r') {
					goto l111
				}
				position++
				if buffer[position] != rune('e') {
					goto l111
				}
				position++
				if buffer[position] != rune('n') {
					goto l111
				}
				position++
				if buffer[position] != rune('t') {
					goto l111
				}
				position++
				if !_rules[rule_]() {
					goto l111
				}
				add(ruleCURRENT, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 12 TODATE <- <('t' 'o' ' ' 'd' 'a' 't' 'e' _)> */
		func() bool {
			position113, tokenIndex113 := position, tokenIndex
			{
				position114 := position
				if buffer[position] != rune('t') {
					goto l113
				}
				position++
				if buffer[position] != rune('o') {
					goto l113
				}
				position++
				if buffer[position] != rune(' ') {
					goto l113
				}
				position++
				if buffer[position] != rune('d') {
					goto l113
				}
				position++
				if buffer[position] != rune('a') {
					goto l113
				}
				position++
				if buffer[position] != rune('t') {
					goto l113
				}
				position++
				if buffer[position] != rune('e') {
					goto l113
				}
				position++
				if !_rules[rule_]() {
					goto l113
				}
				add(ruleTODATE, position114)
			}
			return true
		l113:
			position, tokenIndex = position113, tokenIndex113
			return false
		},
		/* 13 NEXT <- <((('n' 'e' 'x' 't') / ('c' 'u' 'r' 'r' 'e' 'n' 't')) _)> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
				{
					position117, tokenIndex117 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l118
					}
					position++
					if buffer[position] != rune('e') {
						goto l118
					}
					position++
					if buffer[position] != rune('x') {
						goto l118
					}
					position++
					if buffer[position] != rune('t') {
						goto l118
					}
					position++
					goto l117
				l118:
					position, tokenIndex = position117, tokenIndex117
					if buffer[position] != rune('c') {
						goto l115
					}
					position++
					if buffer[position] != rune('u') {
						goto l115
					}
					position++
					if buffer[position] != rune('r') {
						goto l115
					}
					position++
					if buffer[position] != rune('r') {
						goto l115
					}
					position++
					if buffer[position] != rune('e') {
						goto l115
					}
					position++
					if buffer[position] != rune('n') {
						goto l115
					}
					position++
					if buffer[position] != rune('t') {
						goto l115
					}
					position++
				}
			l117:
				if !_rules[rule_]() {
					goto l115
				}
				add(ruleNEXT, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 14 _ <- <Whitespace*> */
		func() bool {
			{
				position120 := position
			l121:
				{
					position122, tokenIndex122 := position, tokenIndex
					{
						position123 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l122
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l122
								}
								position++
							default:
								{
									position125 := position
									{
										position126, tokenIndex126 := position, tokenIndex
										if buffer[position] != rune('\r') {
											goto l127
										}
										position++
										if buffer[position] != rune('\n') {
											goto l127
										}
										position++
										goto l126
									l127:
										position, tokenIndex = position126, tokenIndex126
										if buffer[position] != rune('\n') {
											goto l128
										}
										position++
										goto l126
									l128:
										position, tokenIndex = position126, tokenIndex126
										if buffer[position] != rune('\r') {
											goto l122
										}
										position++
									}
								l126:
									add(ruleEOL, position125)
								}
							}
						}

						add(ruleWhitespace, position123)
					}
					goto l121
				l122:
					position, tokenIndex = position122, tokenIndex122
				}
				add(rule_, position120)
			}
			return true
		},
		/* 15 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 16 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		nil,
		/* 17 EOF <- <!.> */
		nil,
		/* 19 Action0 <- <{
			p.start = time.Date(p.currentTime.Year(), time.January, 1, 0, 0, 0, 0, time.UTC)
			p.end = time.Date(p.currentTime.Year()+1, time.January, 1, 0, 0, 0, 0, time.UTC)
		}> */
		nil,
		/* 20 Action1 <- <{
			p.start = time.Date(p.currentTime.Year(), p.currentTime.Month(), 1, 0, 0, 0, 0, time.UTC)
			p.end = time.Date(p.currentTime.Year(), p.currentTime.Month()+1, 1, 0, 0, 0, 0, time.UTC)
		}> */
		nil,
		/* 21 Action2 <- <{
			if p.number > 0 {
				p.start = time.Date(p.currentTime.Year()-(p.number-1), time.January, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year()+1, time.January, 1, 0, 0, 0, 0, time.UTC)
			} else {
				p.start = time.Date(p.currentTime.Year()-1, time.January, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.January, 1, 0, 0, 0, 0, time.UTC)
			}
		}> */
		nil,
		/* 22 Action3 <- <{
			if p.number > 0 {
				p.start = time.Date(p.currentTime.Year(), p.currentTime.Month()-time.Month(p.number-1), 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), p.currentTime.Month()+1, 1, 0, 0, 0, 0, time.UTC)
			} else {
				p.start = time.Date(p.currentTime.Year(), p.currentTime.Month()-1, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), p.currentTime.Month(), 1, 0, 0, 0, 0, time.UTC)
			}
		}> */
		nil,
		/* 23 Action4 <- <{
			var startoff, endoff time.Month
			if p.number > 1 {
				startoff = time.Month((p.number-2)*-3)
				endoff = time.Month(3)
			}
			switch p.currentTime.Month() {
			case time.January, time.February, time.March:
				p.start = time.Date(p.currentTime.Year()-1, time.October+startoff, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.January+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.April, time.May, time.June:
				p.start = time.Date(p.currentTime.Year(), time.January+startoff, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.April+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.July, time.August, time.September:
				p.start = time.Date(p.currentTime.Year(), time.April+startoff, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.July+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.October, time.November, time.December:
				p.start = time.Date(p.currentTime.Year(), time.July+startoff, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.October+endoff, 1, 0, 0, 0, 0, time.UTC)
			}
		}> */
		nil,
		/* 24 Action5 <- <{
			if p.number > 0 {
				p.start = time.Date(p.currentTime.Year(), time.January, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year()+((p.number-1)+1), time.January, 1, 0, 0, 0, 0, time.UTC)
			} else {
				p.start = time.Date(p.currentTime.Year()+1, time.January, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year()+2, time.January, 1, 0, 0, 0, 0, time.UTC)
			}
		}> */
		nil,
		/* 25 Action6 <- <{
			if p.number > 0 {
				p.start = time.Date(p.currentTime.Year(), p.currentTime.Month()+time.Month(1), 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), p.currentTime.Month()+time.Month((p.number-1)+1), 1, 0, 0, 0, 0, time.UTC)
			} else {
				p.start = time.Date(p.currentTime.Year(), p.currentTime.Month()+time.Month(1), 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), p.currentTime.Month()+time.Month(2), 1, 0, 0, 0, 0, time.UTC)
			}
		}> */
		nil,
		/* 26 Action7 <- <{
			var endoff time.Month
			if p.number > 1 {
				endoff = time.Month(3*(p.number-2))
			}
			switch p.currentTime.Month() {
			case time.January, time.February, time.March:
				p.start = time.Date(p.currentTime.Year(), time.January, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.April+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.April, time.May, time.June:
				p.start = time.Date(p.currentTime.Year(), time.April, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.July+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.July, time.August, time.September:
				p.start = time.Date(p.currentTime.Year(), time.July, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year(), time.October+endoff, 1, 0, 0, 0, 0, time.UTC)
			case time.October, time.November, time.December:
				p.start = time.Date(p.currentTime.Year(), time.October, 1, 0, 0, 0, 0, time.UTC)
				p.end = time.Date(p.currentTime.Year()+1, time.January+endoff, 1, 0, 0, 0, 0, time.UTC)
			}
		}> */
		nil,
		/* 27 Action8 <- <{
			p.start = time.Time{}
			p.end = p.currentTime.Add(1<<63 -1)
		}> */
		nil,
		nil,
		/* 29 Action9 <- <{ n, _ := strconv.Atoi(text); p.number = n}> */
		nil,
		/* 30 Action10 <- <{ p.number = 1 }> */
		nil,
		/* 31 Action11 <- <{ p.number = 2 }> */
		nil,
		/* 32 Action12 <- <{ p.number = 3 }> */
		nil,
		/* 33 Action13 <- <{ p.number = 4 }> */
		nil,
		/* 34 Action14 <- <{ p.number = 5 }> */
		nil,
		/* 35 Action15 <- <{ p.number = 6 }> */
		nil,
		/* 36 Action16 <- <{ p.number = 7 }> */
		nil,
		/* 37 Action17 <- <{ p.number = 8 }> */
		nil,
		/* 38 Action18 <- <{ p.number = 9 }> */
		nil,
		/* 39 Action19 <- <{ p.number = 10 }> */
		nil,
		/* 40 Action20 <- <{ p.number = 11 }> */
		nil,
		/* 41 Action21 <- <{ p.number = 12 }> */
		nil,
		/* 42 Action22 <- <{ p.number = 13 }> */
		nil,
		/* 43 Action23 <- <{ p.number = 14 }> */
		nil,
		/* 44 Action24 <- <{ p.number = 15 }> */
		nil,
		/* 45 Action25 <- <{ p.number = 16 }> */
		nil,
		/* 46 Action26 <- <{ p.number = 17 }> */
		nil,
		/* 47 Action27 <- <{ p.number = 18 }> */
		nil,
		/* 48 Action28 <- <{ p.number = 19 }> */
		nil,
		/* 49 Action29 <- <{ p.number = 20 }> */
		nil,
	}
	p.rules = _rules
	return nil
}
