package pdr

// Code generated by peg -inline -switch grammer.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleExpr
	ruleNOW
	rulePAST
	ruleFUTURE
	ruleALLTIME
	ruleNumber
	ruleYEARS
	ruleMONTHS
	ruleQUARTERS
	ruleLAST
	ruleCURRENT
	ruleTODATE
	ruleNEXT
	rule_
	ruleWhitespace
	ruleEOL
	ruleEOF
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	rulePegText
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"Expr",
	"NOW",
	"PAST",
	"FUTURE",
	"ALLTIME",
	"Number",
	"YEARS",
	"MONTHS",
	"QUARTERS",
	"LAST",
	"CURRENT",
	"TODATE",
	"NEXT",
	"_",
	"Whitespace",
	"EOL",
	"EOF",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"PegText",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	currentTime time.Time
	start       time.Time
	end         time.Time
	number      int

	Buffer string
	buffer []rune
	rules  [51]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.start, p.end = boundsYear(p.currentTime)

		case ruleAction1:

			p.start, p.end = boundsMonth(p.currentTime)

		case ruleAction2:

			p.start, p.end = boundsQuarter(p.currentTime)

		case ruleAction3:

			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(-1*(p.number-1), 0, 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(-1, 0, 0)
			}

		case ruleAction4:

			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -1*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, -1, 0)
			}

		case ruleAction5:

			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, (p.number-1)*-3, 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, -3, 0)
			}

		case ruleAction6:

			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(p.number, 0, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(1, 0, 0)
			}

		case ruleAction7:

			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, p.number, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 1, 0)
			}

		case ruleAction8:

			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, 3*(p.number), 0)
			} else {
				p.start = p.start.AddDate(0, 3, 0)
				p.end = p.start.AddDate(0, 3, 0)
			}

		case ruleAction9:

			p.start = time.Time{}
			p.end = p.currentTime.Add(1<<63 - 1)

		case ruleAction10:
			n, _ := strconv.Atoi(text)
			p.number = n
		case ruleAction11:
			p.number = 1
		case ruleAction12:
			p.number = 2
		case ruleAction13:
			p.number = 3
		case ruleAction14:
			p.number = 4
		case ruleAction15:
			p.number = 5
		case ruleAction16:
			p.number = 6
		case ruleAction17:
			p.number = 7
		case ruleAction18:
			p.number = 8
		case ruleAction19:
			p.number = 9
		case ruleAction20:
			p.number = 10
		case ruleAction21:
			p.number = 11
		case ruleAction22:
			p.number = 12
		case ruleAction23:
			p.number = 13
		case ruleAction24:
			p.number = 14
		case ruleAction25:
			p.number = 15
		case ruleAction26:
			p.number = 16
		case ruleAction27:
			p.number = 17
		case ruleAction28:
			p.number = 18
		case ruleAction29:
			p.number = 19
		case ruleAction30:
			p.number = 20

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(Expr EOF)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					{
						switch buffer[position] {
						case 'a':
							{
								position4 := position
								if buffer[position] != rune('a') {
									goto l0
								}
								position++
								if buffer[position] != rune('l') {
									goto l0
								}
								position++
								if buffer[position] != rune('l') {
									goto l0
								}
								position++
								if buffer[position] != rune(' ') {
									goto l0
								}
								position++
								if buffer[position] != rune('t') {
									goto l0
								}
								position++
								if buffer[position] != rune('i') {
									goto l0
								}
								position++
								if buffer[position] != rune('m') {
									goto l0
								}
								position++
								if buffer[position] != rune('e') {
									goto l0
								}
								position++
								if !_rules[rule_]() {
									goto l0
								}
								{
									add(ruleAction9, position)
								}
								add(ruleALLTIME, position4)
							}
						case 'n':
							{
								position6 := position
								{
									position7, tokenIndex7 := position, tokenIndex
									if !_rules[ruleNEXT]() {
										goto l8
									}
									{
										position9, tokenIndex9 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l9
										}
										goto l10
									l9:
										position, tokenIndex = position9, tokenIndex9
									}
								l10:
									if !_rules[ruleYEARS]() {
										goto l8
									}
									{
										add(ruleAction6, position)
									}
									goto l7
								l8:
									position, tokenIndex = position7, tokenIndex7
									if !_rules[ruleNEXT]() {
										goto l12
									}
									{
										position13, tokenIndex13 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l13
										}
										goto l14
									l13:
										position, tokenIndex = position13, tokenIndex13
									}
								l14:
									if !_rules[ruleMONTHS]() {
										goto l12
									}
									{
										add(ruleAction7, position)
									}
									goto l7
								l12:
									position, tokenIndex = position7, tokenIndex7
									if !_rules[ruleNEXT]() {
										goto l0
									}
									{
										position16, tokenIndex16 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l16
										}
										goto l17
									l16:
										position, tokenIndex = position16, tokenIndex16
									}
								l17:
									if !_rules[ruleQUARTERS]() {
										goto l0
									}
									{
										add(ruleAction8, position)
									}
								}
							l7:
								add(ruleFUTURE, position6)
							}
						case 'l', 'p':
							{
								position19 := position
								{
									position20, tokenIndex20 := position, tokenIndex
									if !_rules[ruleLAST]() {
										goto l21
									}
									{
										position22, tokenIndex22 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l22
										}
										goto l23
									l22:
										position, tokenIndex = position22, tokenIndex22
									}
								l23:
									if !_rules[ruleYEARS]() {
										goto l21
									}
									{
										add(ruleAction3, position)
									}
									goto l20
								l21:
									position, tokenIndex = position20, tokenIndex20
									if !_rules[ruleLAST]() {
										goto l25
									}
									{
										position26, tokenIndex26 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l26
										}
										goto l27
									l26:
										position, tokenIndex = position26, tokenIndex26
									}
								l27:
									if !_rules[ruleMONTHS]() {
										goto l25
									}
									{
										add(ruleAction4, position)
									}
									goto l20
								l25:
									position, tokenIndex = position20, tokenIndex20
									if !_rules[ruleLAST]() {
										goto l0
									}
									{
										position29, tokenIndex29 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l29
										}
										goto l30
									l29:
										position, tokenIndex = position29, tokenIndex29
									}
								l30:
									if !_rules[ruleQUARTERS]() {
										goto l0
									}
									{
										add(ruleAction5, position)
									}
								}
							l20:
								add(rulePAST, position19)
							}
						default:
							{
								position32 := position
								{
									position33, tokenIndex33 := position, tokenIndex
									{
										position35, tokenIndex35 := position, tokenIndex
										if !_rules[ruleCURRENT]() {
											goto l36
										}
										if !_rules[ruleYEARS]() {
											goto l36
										}
										goto l35
									l36:
										position, tokenIndex = position35, tokenIndex35
										if !_rules[ruleYEARS]() {
											goto l37
										}
										if !_rules[ruleTODATE]() {
											goto l37
										}
										goto l35
									l37:
										position, tokenIndex = position35, tokenIndex35
										if buffer[position] != rune('y') {
											goto l34
										}
										position++
										if buffer[position] != rune('t') {
											goto l34
										}
										position++
										if buffer[position] != rune('d') {
											goto l34
										}
										position++
										if !_rules[rule_]() {
											goto l34
										}
									}
								l35:
									{
										add(ruleAction0, position)
									}
									goto l33
								l34:
									position, tokenIndex = position33, tokenIndex33
									{
										position40, tokenIndex40 := position, tokenIndex
										if !_rules[ruleCURRENT]() {
											goto l41
										}
										if !_rules[ruleMONTHS]() {
											goto l41
										}
										goto l40
									l41:
										position, tokenIndex = position40, tokenIndex40
										if !_rules[ruleMONTHS]() {
											goto l42
										}
										if !_rules[ruleTODATE]() {
											goto l42
										}
										goto l40
									l42:
										position, tokenIndex = position40, tokenIndex40
										if buffer[position] != rune('m') {
											goto l39
										}
										position++
										if buffer[position] != rune('t') {
											goto l39
										}
										position++
										if buffer[position] != rune('d') {
											goto l39
										}
										position++
										if !_rules[rule_]() {
											goto l39
										}
									}
								l40:
									{
										add(ruleAction1, position)
									}
									goto l33
								l39:
									position, tokenIndex = position33, tokenIndex33
									{
										position44, tokenIndex44 := position, tokenIndex
										if !_rules[ruleCURRENT]() {
											goto l45
										}
										if !_rules[ruleQUARTERS]() {
											goto l45
										}
										goto l44
									l45:
										position, tokenIndex = position44, tokenIndex44
										if !_rules[ruleQUARTERS]() {
											goto l46
										}
										if !_rules[ruleTODATE]() {
											goto l46
										}
										goto l44
									l46:
										position, tokenIndex = position44, tokenIndex44
										if buffer[position] != rune('q') {
											goto l0
										}
										position++
										if buffer[position] != rune('t') {
											goto l0
										}
										position++
										if buffer[position] != rune('d') {
											goto l0
										}
										position++
										if !_rules[rule_]() {
											goto l0
										}
									}
								l44:
									{
										add(ruleAction2, position)
									}
								}
							l33:
								add(ruleNOW, position32)
							}
						}
					}

					add(ruleExpr, position2)
				}
				{
					position48 := position
					{
						position49, tokenIndex49 := position, tokenIndex
						if !matchDot() {
							goto l49
						}
						goto l0
					l49:
						position, tokenIndex = position49, tokenIndex49
					}
					add(ruleEOF, position48)
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expr <- <((&('a') ALLTIME) | (&('n') FUTURE) | (&('l' | 'p') PAST) | (&('c' | 'm' | 'q' | 'y') NOW))> */
		nil,
		/* 2 NOW <- <((((CURRENT YEARS) / (YEARS TODATE) / ('y' 't' 'd' _)) Action0) / (((CURRENT MONTHS) / (MONTHS TODATE) / ('m' 't' 'd' _)) Action1) / (((CURRENT QUARTERS) / (QUARTERS TODATE) / ('q' 't' 'd' _)) Action2))> */
		nil,
		/* 3 PAST <- <((LAST Number? YEARS Action3) / (LAST Number? MONTHS Action4) / (LAST Number? QUARTERS Action5))> */
		nil,
		/* 4 FUTURE <- <((NEXT Number? YEARS Action6) / (NEXT Number? MONTHS Action7) / (NEXT Number? QUARTERS Action8))> */
		nil,
		/* 5 ALLTIME <- <('a' 'l' 'l' ' ' 't' 'i' 'm' 'e' _ Action9)> */
		nil,
		/* 6 Number <- <(('t' 'w' 'o' _ Action12) / ('t' 'h' 'r' 'e' 'e' _ Action13) / ('f' 'o' 'u' 'r' _ Action14) / ('f' 'i' 'v' 'e' _ Action15) / ('s' 'i' 'x' _ Action16) / ('s' 'e' 'v' 'e' 'n' _ Action17) / ('e' 'i' 'g' 'h' 't' _ Action18) / ('n' 'i' 'n' 'e' _ Action19) / ('t' 'e' 'n' _ Action20) / ('e' 'l' 'e' 'v' 'e' 'n' _ Action21) / ('t' 'w' 'e' 'l' 'v' 'e' _ Action22) / ('t' 'h' 'i' 'r' 't' 'e' 'e' 'n' _ Action23) / ('f' 'o' 'u' 'r' 't' 'e' 'e' 'n' _ Action24) / ('s' 'i' 'x' 't' 'e' 'e' 'n' _ Action26) / ((&('t') ('t' 'w' 'e' 'n' 't' 'y' _ Action30)) | (&('n') ('n' 'i' 'n' 'e' 't' 'e' 'e' 'n' _ Action29)) | (&('e') ('e' 'i' 'g' 'h' 't' 't' 'e' 'e' 'n' _ Action28)) | (&('s') ('s' 'e' 'v' 'e' 'n' 't' 'e' 'e' 'n' _ Action27)) | (&('f') ('f' 'i' 'f' 't' 'e' 'e' 'n' _ Action25)) | (&('o') ('o' 'n' 'e' _ Action11)) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') (<[0-9]+> _ Action10))))> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position57, tokenIndex57 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l58
					}
					position++
					if buffer[position] != rune('w') {
						goto l58
					}
					position++
					if buffer[position] != rune('o') {
						goto l58
					}
					position++
					if !_rules[rule_]() {
						goto l58
					}
					{
						add(ruleAction12, position)
					}
					goto l57
				l58:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('t') {
						goto l60
					}
					position++
					if buffer[position] != rune('h') {
						goto l60
					}
					position++
					if buffer[position] != rune('r') {
						goto l60
					}
					position++
					if buffer[position] != rune('e') {
						goto l60
					}
					position++
					if buffer[position] != rune('e') {
						goto l60
					}
					position++
					if !_rules[rule_]() {
						goto l60
					}
					{
						add(ruleAction13, position)
					}
					goto l57
				l60:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('f') {
						goto l62
					}
					position++
					if buffer[position] != rune('o') {
						goto l62
					}
					position++
					if buffer[position] != rune('u') {
						goto l62
					}
					position++
					if buffer[position] != rune('r') {
						goto l62
					}
					position++
					if !_rules[rule_]() {
						goto l62
					}
					{
						add(ruleAction14, position)
					}
					goto l57
				l62:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('f') {
						goto l64
					}
					position++
					if buffer[position] != rune('i') {
						goto l64
					}
					position++
					if buffer[position] != rune('v') {
						goto l64
					}
					position++
					if buffer[position] != rune('e') {
						goto l64
					}
					position++
					if !_rules[rule_]() {
						goto l64
					}
					{
						add(ruleAction15, position)
					}
					goto l57
				l64:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('s') {
						goto l66
					}
					position++
					if buffer[position] != rune('i') {
						goto l66
					}
					position++
					if buffer[position] != rune('x') {
						goto l66
					}
					position++
					if !_rules[rule_]() {
						goto l66
					}
					{
						add(ruleAction16, position)
					}
					goto l57
				l66:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('s') {
						goto l68
					}
					position++
					if buffer[position] != rune('e') {
						goto l68
					}
					position++
					if buffer[position] != rune('v') {
						goto l68
					}
					position++
					if buffer[position] != rune('e') {
						goto l68
					}
					position++
					if buffer[position] != rune('n') {
						goto l68
					}
					position++
					if !_rules[rule_]() {
						goto l68
					}
					{
						add(ruleAction17, position)
					}
					goto l57
				l68:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('e') {
						goto l70
					}
					position++
					if buffer[position] != rune('i') {
						goto l70
					}
					position++
					if buffer[position] != rune('g') {
						goto l70
					}
					position++
					if buffer[position] != rune('h') {
						goto l70
					}
					position++
					if buffer[position] != rune('t') {
						goto l70
					}
					position++
					if !_rules[rule_]() {
						goto l70
					}
					{
						add(ruleAction18, position)
					}
					goto l57
				l70:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('n') {
						goto l72
					}
					position++
					if buffer[position] != rune('i') {
						goto l72
					}
					position++
					if buffer[position] != rune('n') {
						goto l72
					}
					position++
					if buffer[position] != rune('e') {
						goto l72
					}
					position++
					if !_rules[rule_]() {
						goto l72
					}
					{
						add(ruleAction19, position)
					}
					goto l57
				l72:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('t') {
						goto l74
					}
					position++
					if buffer[position] != rune('e') {
						goto l74
					}
					position++
					if buffer[position] != rune('n') {
						goto l74
					}
					position++
					if !_rules[rule_]() {
						goto l74
					}
					{
						add(ruleAction20, position)
					}
					goto l57
				l74:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('e') {
						goto l76
					}
					position++
					if buffer[position] != rune('l') {
						goto l76
					}
					position++
					if buffer[position] != rune('e') {
						goto l76
					}
					position++
					if buffer[position] != rune('v') {
						goto l76
					}
					position++
					if buffer[position] != rune('e') {
						goto l76
					}
					position++
					if buffer[position] != rune('n') {
						goto l76
					}
					position++
					if !_rules[rule_]() {
						goto l76
					}
					{
						add(ruleAction21, position)
					}
					goto l57
				l76:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('t') {
						goto l78
					}
					position++
					if buffer[position] != rune('w') {
						goto l78
					}
					position++
					if buffer[position] != rune('e') {
						goto l78
					}
					position++
					if buffer[position] != rune('l') {
						goto l78
					}
					position++
					if buffer[position] != rune('v') {
						goto l78
					}
					position++
					if buffer[position] != rune('e') {
						goto l78
					}
					position++
					if !_rules[rule_]() {
						goto l78
					}
					{
						add(ruleAction22, position)
					}
					goto l57
				l78:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('t') {
						goto l80
					}
					position++
					if buffer[position] != rune('h') {
						goto l80
					}
					position++
					if buffer[position] != rune('i') {
						goto l80
					}
					position++
					if buffer[position] != rune('r') {
						goto l80
					}
					position++
					if buffer[position] != rune('t') {
						goto l80
					}
					position++
					if buffer[position] != rune('e') {
						goto l80
					}
					position++
					if buffer[position] != rune('e') {
						goto l80
					}
					position++
					if buffer[position] != rune('n') {
						goto l80
					}
					position++
					if !_rules[rule_]() {
						goto l80
					}
					{
						add(ruleAction23, position)
					}
					goto l57
				l80:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('f') {
						goto l82
					}
					position++
					if buffer[position] != rune('o') {
						goto l82
					}
					position++
					if buffer[position] != rune('u') {
						goto l82
					}
					position++
					if buffer[position] != rune('r') {
						goto l82
					}
					position++
					if buffer[position] != rune('t') {
						goto l82
					}
					position++
					if buffer[position] != rune('e') {
						goto l82
					}
					position++
					if buffer[position] != rune('e') {
						goto l82
					}
					position++
					if buffer[position] != rune('n') {
						goto l82
					}
					position++
					if !_rules[rule_]() {
						goto l82
					}
					{
						add(ruleAction24, position)
					}
					goto l57
				l82:
					position, tokenIndex = position57, tokenIndex57
					if buffer[position] != rune('s') {
						goto l84
					}
					position++
					if buffer[position] != rune('i') {
						goto l84
					}
					position++
					if buffer[position] != rune('x') {
						goto l84
					}
					position++
					if buffer[position] != rune('t') {
						goto l84
					}
					position++
					if buffer[position] != rune('e') {
						goto l84
					}
					position++
					if buffer[position] != rune('e') {
						goto l84
					}
					position++
					if buffer[position] != rune('n') {
						goto l84
					}
					position++
					if !_rules[rule_]() {
						goto l84
					}
					{
						add(ruleAction26, position)
					}
					goto l57
				l84:
					position, tokenIndex = position57, tokenIndex57
					{
						switch buffer[position] {
						case 't':
							if buffer[position] != rune('t') {
								goto l55
							}
							position++
							if buffer[position] != rune('w') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('n') {
								goto l55
							}
							position++
							if buffer[position] != rune('t') {
								goto l55
							}
							position++
							if buffer[position] != rune('y') {
								goto l55
							}
							position++
							if !_rules[rule_]() {
								goto l55
							}
							{
								add(ruleAction30, position)
							}
						case 'n':
							if buffer[position] != rune('n') {
								goto l55
							}
							position++
							if buffer[position] != rune('i') {
								goto l55
							}
							position++
							if buffer[position] != rune('n') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('t') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('n') {
								goto l55
							}
							position++
							if !_rules[rule_]() {
								goto l55
							}
							{
								add(ruleAction29, position)
							}
						case 'e':
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('i') {
								goto l55
							}
							position++
							if buffer[position] != rune('g') {
								goto l55
							}
							position++
							if buffer[position] != rune('h') {
								goto l55
							}
							position++
							if buffer[position] != rune('t') {
								goto l55
							}
							position++
							if buffer[position] != rune('t') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('n') {
								goto l55
							}
							position++
							if !_rules[rule_]() {
								goto l55
							}
							{
								add(ruleAction28, position)
							}
						case 's':
							if buffer[position] != rune('s') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('v') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('n') {
								goto l55
							}
							position++
							if buffer[position] != rune('t') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('n') {
								goto l55
							}
							position++
							if !_rules[rule_]() {
								goto l55
							}
							{
								add(ruleAction27, position)
							}
						case 'f':
							if buffer[position] != rune('f') {
								goto l55
							}
							position++
							if buffer[position] != rune('i') {
								goto l55
							}
							position++
							if buffer[position] != rune('f') {
								goto l55
							}
							position++
							if buffer[position] != rune('t') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if buffer[position] != rune('n') {
								goto l55
							}
							position++
							if !_rules[rule_]() {
								goto l55
							}
							{
								add(ruleAction25, position)
							}
						case 'o':
							if buffer[position] != rune('o') {
								goto l55
							}
							position++
							if buffer[position] != rune('n') {
								goto l55
							}
							position++
							if buffer[position] != rune('e') {
								goto l55
							}
							position++
							if !_rules[rule_]() {
								goto l55
							}
							{
								add(ruleAction11, position)
							}
						default:
							{
								position93 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l55
								}
								position++
							l94:
								{
									position95, tokenIndex95 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l95
									}
									position++
									goto l94
								l95:
									position, tokenIndex = position95, tokenIndex95
								}
								add(rulePegText, position93)
							}
							if !_rules[rule_]() {
								goto l55
							}
							{
								add(ruleAction10, position)
							}
						}
					}

				}
			l57:
				add(ruleNumber, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 7 YEARS <- <('y' 'e' 'a' 'r' 's'? _)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				if buffer[position] != rune('y') {
					goto l97
				}
				position++
				if buffer[position] != rune('e') {
					goto l97
				}
				position++
				if buffer[position] != rune('a') {
					goto l97
				}
				position++
				if buffer[position] != rune('r') {
					goto l97
				}
				position++
				{
					position99, tokenIndex99 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l99
					}
					position++
					goto l100
				l99:
					position, tokenIndex = position99, tokenIndex99
				}
			l100:
				if !_rules[rule_]() {
					goto l97
				}
				add(ruleYEARS, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 8 MONTHS <- <('m' 'o' 'n' 't' 'h' 's'? _)> */
		func() bool {
			position101, tokenIndex101 := position, tokenIndex
			{
				position102 := position
				if buffer[position] != rune('m') {
					goto l101
				}
				position++
				if buffer[position] != rune('o') {
					goto l101
				}
				position++
				if buffer[position] != rune('n') {
					goto l101
				}
				position++
				if buffer[position] != rune('t') {
					goto l101
				}
				position++
				if buffer[position] != rune('h') {
					goto l101
				}
				position++
				{
					position103, tokenIndex103 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l103
					}
					position++
					goto l104
				l103:
					position, tokenIndex = position103, tokenIndex103
				}
			l104:
				if !_rules[rule_]() {
					goto l101
				}
				add(ruleMONTHS, position102)
			}
			return true
		l101:
			position, tokenIndex = position101, tokenIndex101
			return false
		},
		/* 9 QUARTERS <- <('q' 'u' 'a' 'r' 't' 'e' 'r' 's'? _)> */
		func() bool {
			position105, tokenIndex105 := position, tokenIndex
			{
				position106 := position
				if buffer[position] != rune('q') {
					goto l105
				}
				position++
				if buffer[position] != rune('u') {
					goto l105
				}
				position++
				if buffer[position] != rune('a') {
					goto l105
				}
				position++
				if buffer[position] != rune('r') {
					goto l105
				}
				position++
				if buffer[position] != rune('t') {
					goto l105
				}
				position++
				if buffer[position] != rune('e') {
					goto l105
				}
				position++
				if buffer[position] != rune('r') {
					goto l105
				}
				position++
				{
					position107, tokenIndex107 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l107
					}
					position++
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				if !_rules[rule_]() {
					goto l105
				}
				add(ruleQUARTERS, position106)
			}
			return true
		l105:
			position, tokenIndex = position105, tokenIndex105
			return false
		},
		/* 10 LAST <- <((('l' 'a' 's' 't') / ('p' 'r' 'e' 'v' 'i' 'o' 'u' 's') / ('p' 'a' 's' 't')) _)> */
		func() bool {
			position109, tokenIndex109 := position, tokenIndex
			{
				position110 := position
				{
					position111, tokenIndex111 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l112
					}
					position++
					if buffer[position] != rune('a') {
						goto l112
					}
					position++
					if buffer[position] != rune('s') {
						goto l112
					}
					position++
					if buffer[position] != rune('t') {
						goto l112
					}
					position++
					goto l111
				l112:
					position, tokenIndex = position111, tokenIndex111
					if buffer[position] != rune('p') {
						goto l113
					}
					position++
					if buffer[position] != rune('r') {
						goto l113
					}
					position++
					if buffer[position] != rune('e') {
						goto l113
					}
					position++
					if buffer[position] != rune('v') {
						goto l113
					}
					position++
					if buffer[position] != rune('i') {
						goto l113
					}
					position++
					if buffer[position] != rune('o') {
						goto l113
					}
					position++
					if buffer[position] != rune('u') {
						goto l113
					}
					position++
					if buffer[position] != rune('s') {
						goto l113
					}
					position++
					goto l111
				l113:
					position, tokenIndex = position111, tokenIndex111
					if buffer[position] != rune('p') {
						goto l109
					}
					position++
					if buffer[position] != rune('a') {
						goto l109
					}
					position++
					if buffer[position] != rune('s') {
						goto l109
					}
					position++
					if buffer[position] != rune('t') {
						goto l109
					}
					position++
				}
			l111:
				if !_rules[rule_]() {
					goto l109
				}
				add(ruleLAST, position110)
			}
			return true
		l109:
			position, tokenIndex = position109, tokenIndex109
			return false
		},
		/* 11 CURRENT <- <('c' 'u' 'r' 'r' 'e' 'n' 't' _)> */
		func() bool {
			position114, tokenIndex114 := position, tokenIndex
			{
				position115 := position
				if buffer[position] != rune('c') {
					goto l114
				}
				position++
				if buffer[position] != rune('u') {
					goto l114
				}
				position++
				if buffer[position] != rune('r') {
					goto l114
				}
				position++
				if buffer[position] != rune('r') {
					goto l114
				}
				position++
				if buffer[position] != rune('e') {
					goto l114
				}
				position++
				if buffer[position] != rune('n') {
					goto l114
				}
				position++
				if buffer[position] != rune('t') {
					goto l114
				}
				position++
				if !_rules[rule_]() {
					goto l114
				}
				add(ruleCURRENT, position115)
			}
			return true
		l114:
			position, tokenIndex = position114, tokenIndex114
			return false
		},
		/* 12 TODATE <- <('t' 'o' ' ' 'd' 'a' 't' 'e' _)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if buffer[position] != rune('t') {
					goto l116
				}
				position++
				if buffer[position] != rune('o') {
					goto l116
				}
				position++
				if buffer[position] != rune(' ') {
					goto l116
				}
				position++
				if buffer[position] != rune('d') {
					goto l116
				}
				position++
				if buffer[position] != rune('a') {
					goto l116
				}
				position++
				if buffer[position] != rune('t') {
					goto l116
				}
				position++
				if buffer[position] != rune('e') {
					goto l116
				}
				position++
				if !_rules[rule_]() {
					goto l116
				}
				add(ruleTODATE, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 13 NEXT <- <('n' 'e' 'x' 't' _)> */
		func() bool {
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				if buffer[position] != rune('n') {
					goto l118
				}
				position++
				if buffer[position] != rune('e') {
					goto l118
				}
				position++
				if buffer[position] != rune('x') {
					goto l118
				}
				position++
				if buffer[position] != rune('t') {
					goto l118
				}
				position++
				if !_rules[rule_]() {
					goto l118
				}
				add(ruleNEXT, position119)
			}
			return true
		l118:
			position, tokenIndex = position118, tokenIndex118
			return false
		},
		/* 14 _ <- <Whitespace*> */
		func() bool {
			{
				position121 := position
			l122:
				{
					position123, tokenIndex123 := position, tokenIndex
					{
						position124 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l123
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l123
								}
								position++
							default:
								{
									position126 := position
									{
										position127, tokenIndex127 := position, tokenIndex
										if buffer[position] != rune('\r') {
											goto l128
										}
										position++
										if buffer[position] != rune('\n') {
											goto l128
										}
										position++
										goto l127
									l128:
										position, tokenIndex = position127, tokenIndex127
										if buffer[position] != rune('\n') {
											goto l129
										}
										position++
										goto l127
									l129:
										position, tokenIndex = position127, tokenIndex127
										if buffer[position] != rune('\r') {
											goto l123
										}
										position++
									}
								l127:
									add(ruleEOL, position126)
								}
							}
						}

						add(ruleWhitespace, position124)
					}
					goto l122
				l123:
					position, tokenIndex = position123, tokenIndex123
				}
				add(rule_, position121)
			}
			return true
		},
		/* 15 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 16 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		nil,
		/* 17 EOF <- <!.> */
		nil,
		/* 19 Action0 <- <{
			p.start, p.end = boundsYear(p.currentTime)
		}> */
		nil,
		/* 20 Action1 <- <{
			p.start, p.end = boundsMonth(p.currentTime)
		}> */
		nil,
		/* 21 Action2 <- <{
			p.start, p.end = boundsQuarter(p.currentTime)
		}> */
		nil,
		/* 22 Action3 <- <{
			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(-1*(p.number-1), 0, 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(-1, 0, 0)
			}
		}> */
		nil,
		/* 23 Action4 <- <{
			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -1*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, -1, 0)
			}
		}> */
		nil,
		/* 24 Action5 <- <{
			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, (p.number-1)*-3, 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0,-3,0)
			}
		}> */
		nil,
		/* 25 Action6 <- <{
			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(p.number, 0, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(1, 0, 0)
			}
		}> */
		nil,
		/* 26 Action7 <- <{
			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, p.number, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 1, 0)
			}
		}> */
		nil,
		/* 27 Action8 <- <{
			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0,3*(p.number),0)
			} else {
				p.start = p.start.AddDate(0,3,0)
				p.end = p.start.AddDate(0,3,0)
			}
		}> */
		nil,
		/* 28 Action9 <- <{
			p.start = time.Time{}
			p.end = p.currentTime.Add(1<<63 -1)
		}> */
		nil,
		nil,
		/* 30 Action10 <- <{ n, _ := strconv.Atoi(text); p.number = n}> */
		nil,
		/* 31 Action11 <- <{ p.number = 1 }> */
		nil,
		/* 32 Action12 <- <{ p.number = 2 }> */
		nil,
		/* 33 Action13 <- <{ p.number = 3 }> */
		nil,
		/* 34 Action14 <- <{ p.number = 4 }> */
		nil,
		/* 35 Action15 <- <{ p.number = 5 }> */
		nil,
		/* 36 Action16 <- <{ p.number = 6 }> */
		nil,
		/* 37 Action17 <- <{ p.number = 7 }> */
		nil,
		/* 38 Action18 <- <{ p.number = 8 }> */
		nil,
		/* 39 Action19 <- <{ p.number = 9 }> */
		nil,
		/* 40 Action20 <- <{ p.number = 10 }> */
		nil,
		/* 41 Action21 <- <{ p.number = 11 }> */
		nil,
		/* 42 Action22 <- <{ p.number = 12 }> */
		nil,
		/* 43 Action23 <- <{ p.number = 13 }> */
		nil,
		/* 44 Action24 <- <{ p.number = 14 }> */
		nil,
		/* 45 Action25 <- <{ p.number = 15 }> */
		nil,
		/* 46 Action26 <- <{ p.number = 16 }> */
		nil,
		/* 47 Action27 <- <{ p.number = 17 }> */
		nil,
		/* 48 Action28 <- <{ p.number = 18 }> */
		nil,
		/* 49 Action29 <- <{ p.number = 19 }> */
		nil,
		/* 50 Action30 <- <{ p.number = 20 }> */
		nil,
	}
	p.rules = _rules
	return nil
}
