package pdr

// Code generated by peg -inline -switch grammer.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleExpr
	ruleNOW
	rulePAST
	ruleFUTURE
	ruleALLTIME
	ruleNumber
	ruleYEARS
	ruleQUARTERS
	ruleMONTHS
	ruleWEEKS
	ruleLAST
	ruleCURRENT
	ruleTODATE
	ruleNEXT
	rule_
	ruleWhitespace
	ruleEOL
	ruleEOF
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	rulePegText
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"Expr",
	"NOW",
	"PAST",
	"FUTURE",
	"ALLTIME",
	"Number",
	"YEARS",
	"QUARTERS",
	"MONTHS",
	"WEEKS",
	"LAST",
	"CURRENT",
	"TODATE",
	"NEXT",
	"_",
	"Whitespace",
	"EOL",
	"EOF",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"PegText",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	currentTime time.Time
	start       time.Time
	end         time.Time
	number      int

	Buffer string
	buffer []rune
	rules  [54]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.start, p.end = boundsYear(p.currentTime)

		case ruleAction1:

			p.start, p.end = boundsQuarter(p.currentTime)

		case ruleAction2:

			p.start, p.end = boundsMonth(p.currentTime)

		case ruleAction3:

			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(-1*(p.number-1), 0, 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(-1, 0, 0)
			}

		case ruleAction4:

			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -3*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, -3, 0)
			}

		case ruleAction5:

			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -1*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, -1, 0)
			}

		case ruleAction6:

			p.start, p.end = boundsWeek(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, 0, -7*(p.number-1))
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, 0, -7)
			}

		case ruleAction7:

			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(p.number, 0, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(1, 0, 0)
			}

		case ruleAction8:

			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, 3*(p.number), 0)
			} else {
				p.start = p.start.AddDate(0, 3, 0)
				p.end = p.start.AddDate(0, 3, 0)
			}

		case ruleAction9:

			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, p.number, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 1, 0)
			}

		case ruleAction10:

			p.start, p.end = boundsWeek(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, 0, 7*p.number)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 0, 7)
			}

		case ruleAction11:

			p.start = time.Time{}
			p.end = p.currentTime.Add(1<<63 - 1)

		case ruleAction12:
			n, _ := strconv.Atoi(text)
			p.number = n
		case ruleAction13:
			p.number = 1
		case ruleAction14:
			p.number = 2
		case ruleAction15:
			p.number = 3
		case ruleAction16:
			p.number = 4
		case ruleAction17:
			p.number = 5
		case ruleAction18:
			p.number = 6
		case ruleAction19:
			p.number = 7
		case ruleAction20:
			p.number = 8
		case ruleAction21:
			p.number = 9
		case ruleAction22:
			p.number = 10
		case ruleAction23:
			p.number = 11
		case ruleAction24:
			p.number = 12
		case ruleAction25:
			p.number = 13
		case ruleAction26:
			p.number = 14
		case ruleAction27:
			p.number = 15
		case ruleAction28:
			p.number = 16
		case ruleAction29:
			p.number = 17
		case ruleAction30:
			p.number = 18
		case ruleAction31:
			p.number = 19
		case ruleAction32:
			p.number = 20

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(Expr EOF)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					{
						switch buffer[position] {
						case 'a':
							{
								position4 := position
								if buffer[position] != rune('a') {
									goto l0
								}
								position++
								if buffer[position] != rune('l') {
									goto l0
								}
								position++
								if buffer[position] != rune('l') {
									goto l0
								}
								position++
								if buffer[position] != rune(' ') {
									goto l0
								}
								position++
								if buffer[position] != rune('t') {
									goto l0
								}
								position++
								if buffer[position] != rune('i') {
									goto l0
								}
								position++
								if buffer[position] != rune('m') {
									goto l0
								}
								position++
								if buffer[position] != rune('e') {
									goto l0
								}
								position++
								if !_rules[rule_]() {
									goto l0
								}
								{
									add(ruleAction11, position)
								}
								add(ruleALLTIME, position4)
							}
						case 'n':
							{
								position6 := position
								{
									position7, tokenIndex7 := position, tokenIndex
									if !_rules[ruleNEXT]() {
										goto l8
									}
									{
										position9, tokenIndex9 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l9
										}
										goto l10
									l9:
										position, tokenIndex = position9, tokenIndex9
									}
								l10:
									if !_rules[ruleYEARS]() {
										goto l8
									}
									{
										add(ruleAction7, position)
									}
									goto l7
								l8:
									position, tokenIndex = position7, tokenIndex7
									if !_rules[ruleNEXT]() {
										goto l12
									}
									{
										position13, tokenIndex13 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l13
										}
										goto l14
									l13:
										position, tokenIndex = position13, tokenIndex13
									}
								l14:
									if !_rules[ruleQUARTERS]() {
										goto l12
									}
									{
										add(ruleAction8, position)
									}
									goto l7
								l12:
									position, tokenIndex = position7, tokenIndex7
									if !_rules[ruleNEXT]() {
										goto l16
									}
									{
										position17, tokenIndex17 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l17
										}
										goto l18
									l17:
										position, tokenIndex = position17, tokenIndex17
									}
								l18:
									if !_rules[ruleMONTHS]() {
										goto l16
									}
									{
										add(ruleAction9, position)
									}
									goto l7
								l16:
									position, tokenIndex = position7, tokenIndex7
									if !_rules[ruleNEXT]() {
										goto l0
									}
									{
										position20, tokenIndex20 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l20
										}
										goto l21
									l20:
										position, tokenIndex = position20, tokenIndex20
									}
								l21:
									if !_rules[ruleWEEKS]() {
										goto l0
									}
									{
										add(ruleAction10, position)
									}
								}
							l7:
								add(ruleFUTURE, position6)
							}
						case 'l', 'p':
							{
								position23 := position
								{
									position24, tokenIndex24 := position, tokenIndex
									if !_rules[ruleLAST]() {
										goto l25
									}
									{
										position26, tokenIndex26 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l26
										}
										goto l27
									l26:
										position, tokenIndex = position26, tokenIndex26
									}
								l27:
									if !_rules[ruleYEARS]() {
										goto l25
									}
									{
										add(ruleAction3, position)
									}
									goto l24
								l25:
									position, tokenIndex = position24, tokenIndex24
									if !_rules[ruleLAST]() {
										goto l29
									}
									{
										position30, tokenIndex30 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l30
										}
										goto l31
									l30:
										position, tokenIndex = position30, tokenIndex30
									}
								l31:
									if !_rules[ruleQUARTERS]() {
										goto l29
									}
									{
										add(ruleAction4, position)
									}
									goto l24
								l29:
									position, tokenIndex = position24, tokenIndex24
									if !_rules[ruleLAST]() {
										goto l33
									}
									{
										position34, tokenIndex34 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l34
										}
										goto l35
									l34:
										position, tokenIndex = position34, tokenIndex34
									}
								l35:
									if !_rules[ruleMONTHS]() {
										goto l33
									}
									{
										add(ruleAction5, position)
									}
									goto l24
								l33:
									position, tokenIndex = position24, tokenIndex24
									if !_rules[ruleLAST]() {
										goto l0
									}
									{
										position37, tokenIndex37 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l37
										}
										goto l38
									l37:
										position, tokenIndex = position37, tokenIndex37
									}
								l38:
									if !_rules[ruleWEEKS]() {
										goto l0
									}
									{
										add(ruleAction6, position)
									}
								}
							l24:
								add(rulePAST, position23)
							}
						default:
							{
								position40 := position
								{
									position41, tokenIndex41 := position, tokenIndex
									{
										position43, tokenIndex43 := position, tokenIndex
										if !_rules[ruleCURRENT]() {
											goto l44
										}
										if !_rules[ruleYEARS]() {
											goto l44
										}
										goto l43
									l44:
										position, tokenIndex = position43, tokenIndex43
										if !_rules[ruleYEARS]() {
											goto l45
										}
										if !_rules[ruleTODATE]() {
											goto l45
										}
										goto l43
									l45:
										position, tokenIndex = position43, tokenIndex43
										if buffer[position] != rune('y') {
											goto l42
										}
										position++
										if buffer[position] != rune('t') {
											goto l42
										}
										position++
										if buffer[position] != rune('d') {
											goto l42
										}
										position++
										if !_rules[rule_]() {
											goto l42
										}
									}
								l43:
									{
										add(ruleAction0, position)
									}
									goto l41
								l42:
									position, tokenIndex = position41, tokenIndex41
									{
										position48, tokenIndex48 := position, tokenIndex
										if !_rules[ruleCURRENT]() {
											goto l49
										}
										if !_rules[ruleQUARTERS]() {
											goto l49
										}
										goto l48
									l49:
										position, tokenIndex = position48, tokenIndex48
										if !_rules[ruleQUARTERS]() {
											goto l50
										}
										if !_rules[ruleTODATE]() {
											goto l50
										}
										goto l48
									l50:
										position, tokenIndex = position48, tokenIndex48
										if buffer[position] != rune('q') {
											goto l47
										}
										position++
										if buffer[position] != rune('t') {
											goto l47
										}
										position++
										if buffer[position] != rune('d') {
											goto l47
										}
										position++
										if !_rules[rule_]() {
											goto l47
										}
									}
								l48:
									{
										add(ruleAction1, position)
									}
									goto l41
								l47:
									position, tokenIndex = position41, tokenIndex41
									{
										position52, tokenIndex52 := position, tokenIndex
										if !_rules[ruleCURRENT]() {
											goto l53
										}
										if !_rules[ruleMONTHS]() {
											goto l53
										}
										goto l52
									l53:
										position, tokenIndex = position52, tokenIndex52
										if !_rules[ruleMONTHS]() {
											goto l54
										}
										if !_rules[ruleTODATE]() {
											goto l54
										}
										goto l52
									l54:
										position, tokenIndex = position52, tokenIndex52
										if buffer[position] != rune('m') {
											goto l0
										}
										position++
										if buffer[position] != rune('t') {
											goto l0
										}
										position++
										if buffer[position] != rune('d') {
											goto l0
										}
										position++
										if !_rules[rule_]() {
											goto l0
										}
									}
								l52:
									{
										add(ruleAction2, position)
									}
								}
							l41:
								add(ruleNOW, position40)
							}
						}
					}

					add(ruleExpr, position2)
				}
				{
					position56 := position
					{
						position57, tokenIndex57 := position, tokenIndex
						if !matchDot() {
							goto l57
						}
						goto l0
					l57:
						position, tokenIndex = position57, tokenIndex57
					}
					add(ruleEOF, position56)
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expr <- <((&('a') ALLTIME) | (&('n') FUTURE) | (&('l' | 'p') PAST) | (&('c' | 'm' | 'q' | 'y') NOW))> */
		nil,
		/* 2 NOW <- <((((CURRENT YEARS) / (YEARS TODATE) / ('y' 't' 'd' _)) Action0) / (((CURRENT QUARTERS) / (QUARTERS TODATE) / ('q' 't' 'd' _)) Action1) / (((CURRENT MONTHS) / (MONTHS TODATE) / ('m' 't' 'd' _)) Action2))> */
		nil,
		/* 3 PAST <- <((LAST Number? YEARS Action3) / (LAST Number? QUARTERS Action4) / (LAST Number? MONTHS Action5) / (LAST Number? WEEKS Action6))> */
		nil,
		/* 4 FUTURE <- <((NEXT Number? YEARS Action7) / (NEXT Number? QUARTERS Action8) / (NEXT Number? MONTHS Action9) / (NEXT Number? WEEKS Action10))> */
		nil,
		/* 5 ALLTIME <- <('a' 'l' 'l' ' ' 't' 'i' 'm' 'e' _ Action11)> */
		nil,
		/* 6 Number <- <(('t' 'w' 'o' _ Action14) / ('t' 'h' 'r' 'e' 'e' _ Action15) / ('f' 'o' 'u' 'r' _ Action16) / ('f' 'i' 'v' 'e' _ Action17) / ('s' 'i' 'x' _ Action18) / ('s' 'e' 'v' 'e' 'n' _ Action19) / ('e' 'i' 'g' 'h' 't' _ Action20) / ('n' 'i' 'n' 'e' _ Action21) / ('t' 'e' 'n' _ Action22) / ('e' 'l' 'e' 'v' 'e' 'n' _ Action23) / ('t' 'w' 'e' 'l' 'v' 'e' _ Action24) / ('t' 'h' 'i' 'r' 't' 'e' 'e' 'n' _ Action25) / ('f' 'o' 'u' 'r' 't' 'e' 'e' 'n' _ Action26) / ('s' 'i' 'x' 't' 'e' 'e' 'n' _ Action28) / ((&('t') ('t' 'w' 'e' 'n' 't' 'y' _ Action32)) | (&('n') ('n' 'i' 'n' 'e' 't' 'e' 'e' 'n' _ Action31)) | (&('e') ('e' 'i' 'g' 'h' 't' 't' 'e' 'e' 'n' _ Action30)) | (&('s') ('s' 'e' 'v' 'e' 'n' 't' 'e' 'e' 'n' _ Action29)) | (&('f') ('f' 'i' 'f' 't' 'e' 'e' 'n' _ Action27)) | (&('o') ('o' 'n' 'e' _ Action13)) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') (<[0-9]+> _ Action12))))> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				{
					position65, tokenIndex65 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l66
					}
					position++
					if buffer[position] != rune('w') {
						goto l66
					}
					position++
					if buffer[position] != rune('o') {
						goto l66
					}
					position++
					if !_rules[rule_]() {
						goto l66
					}
					{
						add(ruleAction14, position)
					}
					goto l65
				l66:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('t') {
						goto l68
					}
					position++
					if buffer[position] != rune('h') {
						goto l68
					}
					position++
					if buffer[position] != rune('r') {
						goto l68
					}
					position++
					if buffer[position] != rune('e') {
						goto l68
					}
					position++
					if buffer[position] != rune('e') {
						goto l68
					}
					position++
					if !_rules[rule_]() {
						goto l68
					}
					{
						add(ruleAction15, position)
					}
					goto l65
				l68:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('f') {
						goto l70
					}
					position++
					if buffer[position] != rune('o') {
						goto l70
					}
					position++
					if buffer[position] != rune('u') {
						goto l70
					}
					position++
					if buffer[position] != rune('r') {
						goto l70
					}
					position++
					if !_rules[rule_]() {
						goto l70
					}
					{
						add(ruleAction16, position)
					}
					goto l65
				l70:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('f') {
						goto l72
					}
					position++
					if buffer[position] != rune('i') {
						goto l72
					}
					position++
					if buffer[position] != rune('v') {
						goto l72
					}
					position++
					if buffer[position] != rune('e') {
						goto l72
					}
					position++
					if !_rules[rule_]() {
						goto l72
					}
					{
						add(ruleAction17, position)
					}
					goto l65
				l72:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('s') {
						goto l74
					}
					position++
					if buffer[position] != rune('i') {
						goto l74
					}
					position++
					if buffer[position] != rune('x') {
						goto l74
					}
					position++
					if !_rules[rule_]() {
						goto l74
					}
					{
						add(ruleAction18, position)
					}
					goto l65
				l74:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('s') {
						goto l76
					}
					position++
					if buffer[position] != rune('e') {
						goto l76
					}
					position++
					if buffer[position] != rune('v') {
						goto l76
					}
					position++
					if buffer[position] != rune('e') {
						goto l76
					}
					position++
					if buffer[position] != rune('n') {
						goto l76
					}
					position++
					if !_rules[rule_]() {
						goto l76
					}
					{
						add(ruleAction19, position)
					}
					goto l65
				l76:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('e') {
						goto l78
					}
					position++
					if buffer[position] != rune('i') {
						goto l78
					}
					position++
					if buffer[position] != rune('g') {
						goto l78
					}
					position++
					if buffer[position] != rune('h') {
						goto l78
					}
					position++
					if buffer[position] != rune('t') {
						goto l78
					}
					position++
					if !_rules[rule_]() {
						goto l78
					}
					{
						add(ruleAction20, position)
					}
					goto l65
				l78:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('n') {
						goto l80
					}
					position++
					if buffer[position] != rune('i') {
						goto l80
					}
					position++
					if buffer[position] != rune('n') {
						goto l80
					}
					position++
					if buffer[position] != rune('e') {
						goto l80
					}
					position++
					if !_rules[rule_]() {
						goto l80
					}
					{
						add(ruleAction21, position)
					}
					goto l65
				l80:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('t') {
						goto l82
					}
					position++
					if buffer[position] != rune('e') {
						goto l82
					}
					position++
					if buffer[position] != rune('n') {
						goto l82
					}
					position++
					if !_rules[rule_]() {
						goto l82
					}
					{
						add(ruleAction22, position)
					}
					goto l65
				l82:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('e') {
						goto l84
					}
					position++
					if buffer[position] != rune('l') {
						goto l84
					}
					position++
					if buffer[position] != rune('e') {
						goto l84
					}
					position++
					if buffer[position] != rune('v') {
						goto l84
					}
					position++
					if buffer[position] != rune('e') {
						goto l84
					}
					position++
					if buffer[position] != rune('n') {
						goto l84
					}
					position++
					if !_rules[rule_]() {
						goto l84
					}
					{
						add(ruleAction23, position)
					}
					goto l65
				l84:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('t') {
						goto l86
					}
					position++
					if buffer[position] != rune('w') {
						goto l86
					}
					position++
					if buffer[position] != rune('e') {
						goto l86
					}
					position++
					if buffer[position] != rune('l') {
						goto l86
					}
					position++
					if buffer[position] != rune('v') {
						goto l86
					}
					position++
					if buffer[position] != rune('e') {
						goto l86
					}
					position++
					if !_rules[rule_]() {
						goto l86
					}
					{
						add(ruleAction24, position)
					}
					goto l65
				l86:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('t') {
						goto l88
					}
					position++
					if buffer[position] != rune('h') {
						goto l88
					}
					position++
					if buffer[position] != rune('i') {
						goto l88
					}
					position++
					if buffer[position] != rune('r') {
						goto l88
					}
					position++
					if buffer[position] != rune('t') {
						goto l88
					}
					position++
					if buffer[position] != rune('e') {
						goto l88
					}
					position++
					if buffer[position] != rune('e') {
						goto l88
					}
					position++
					if buffer[position] != rune('n') {
						goto l88
					}
					position++
					if !_rules[rule_]() {
						goto l88
					}
					{
						add(ruleAction25, position)
					}
					goto l65
				l88:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('f') {
						goto l90
					}
					position++
					if buffer[position] != rune('o') {
						goto l90
					}
					position++
					if buffer[position] != rune('u') {
						goto l90
					}
					position++
					if buffer[position] != rune('r') {
						goto l90
					}
					position++
					if buffer[position] != rune('t') {
						goto l90
					}
					position++
					if buffer[position] != rune('e') {
						goto l90
					}
					position++
					if buffer[position] != rune('e') {
						goto l90
					}
					position++
					if buffer[position] != rune('n') {
						goto l90
					}
					position++
					if !_rules[rule_]() {
						goto l90
					}
					{
						add(ruleAction26, position)
					}
					goto l65
				l90:
					position, tokenIndex = position65, tokenIndex65
					if buffer[position] != rune('s') {
						goto l92
					}
					position++
					if buffer[position] != rune('i') {
						goto l92
					}
					position++
					if buffer[position] != rune('x') {
						goto l92
					}
					position++
					if buffer[position] != rune('t') {
						goto l92
					}
					position++
					if buffer[position] != rune('e') {
						goto l92
					}
					position++
					if buffer[position] != rune('e') {
						goto l92
					}
					position++
					if buffer[position] != rune('n') {
						goto l92
					}
					position++
					if !_rules[rule_]() {
						goto l92
					}
					{
						add(ruleAction28, position)
					}
					goto l65
				l92:
					position, tokenIndex = position65, tokenIndex65
					{
						switch buffer[position] {
						case 't':
							if buffer[position] != rune('t') {
								goto l63
							}
							position++
							if buffer[position] != rune('w') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('n') {
								goto l63
							}
							position++
							if buffer[position] != rune('t') {
								goto l63
							}
							position++
							if buffer[position] != rune('y') {
								goto l63
							}
							position++
							if !_rules[rule_]() {
								goto l63
							}
							{
								add(ruleAction32, position)
							}
						case 'n':
							if buffer[position] != rune('n') {
								goto l63
							}
							position++
							if buffer[position] != rune('i') {
								goto l63
							}
							position++
							if buffer[position] != rune('n') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('t') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('n') {
								goto l63
							}
							position++
							if !_rules[rule_]() {
								goto l63
							}
							{
								add(ruleAction31, position)
							}
						case 'e':
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('i') {
								goto l63
							}
							position++
							if buffer[position] != rune('g') {
								goto l63
							}
							position++
							if buffer[position] != rune('h') {
								goto l63
							}
							position++
							if buffer[position] != rune('t') {
								goto l63
							}
							position++
							if buffer[position] != rune('t') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('n') {
								goto l63
							}
							position++
							if !_rules[rule_]() {
								goto l63
							}
							{
								add(ruleAction30, position)
							}
						case 's':
							if buffer[position] != rune('s') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('v') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('n') {
								goto l63
							}
							position++
							if buffer[position] != rune('t') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('n') {
								goto l63
							}
							position++
							if !_rules[rule_]() {
								goto l63
							}
							{
								add(ruleAction29, position)
							}
						case 'f':
							if buffer[position] != rune('f') {
								goto l63
							}
							position++
							if buffer[position] != rune('i') {
								goto l63
							}
							position++
							if buffer[position] != rune('f') {
								goto l63
							}
							position++
							if buffer[position] != rune('t') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if buffer[position] != rune('n') {
								goto l63
							}
							position++
							if !_rules[rule_]() {
								goto l63
							}
							{
								add(ruleAction27, position)
							}
						case 'o':
							if buffer[position] != rune('o') {
								goto l63
							}
							position++
							if buffer[position] != rune('n') {
								goto l63
							}
							position++
							if buffer[position] != rune('e') {
								goto l63
							}
							position++
							if !_rules[rule_]() {
								goto l63
							}
							{
								add(ruleAction13, position)
							}
						default:
							{
								position101 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l63
								}
								position++
							l102:
								{
									position103, tokenIndex103 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l103
									}
									position++
									goto l102
								l103:
									position, tokenIndex = position103, tokenIndex103
								}
								add(rulePegText, position101)
							}
							if !_rules[rule_]() {
								goto l63
							}
							{
								add(ruleAction12, position)
							}
						}
					}

				}
			l65:
				add(ruleNumber, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 7 YEARS <- <('y' 'e' 'a' 'r' 's'? _)> */
		func() bool {
			position105, tokenIndex105 := position, tokenIndex
			{
				position106 := position
				if buffer[position] != rune('y') {
					goto l105
				}
				position++
				if buffer[position] != rune('e') {
					goto l105
				}
				position++
				if buffer[position] != rune('a') {
					goto l105
				}
				position++
				if buffer[position] != rune('r') {
					goto l105
				}
				position++
				{
					position107, tokenIndex107 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l107
					}
					position++
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				if !_rules[rule_]() {
					goto l105
				}
				add(ruleYEARS, position106)
			}
			return true
		l105:
			position, tokenIndex = position105, tokenIndex105
			return false
		},
		/* 8 QUARTERS <- <('q' 'u' 'a' 'r' 't' 'e' 'r' 's'? _)> */
		func() bool {
			position109, tokenIndex109 := position, tokenIndex
			{
				position110 := position
				if buffer[position] != rune('q') {
					goto l109
				}
				position++
				if buffer[position] != rune('u') {
					goto l109
				}
				position++
				if buffer[position] != rune('a') {
					goto l109
				}
				position++
				if buffer[position] != rune('r') {
					goto l109
				}
				position++
				if buffer[position] != rune('t') {
					goto l109
				}
				position++
				if buffer[position] != rune('e') {
					goto l109
				}
				position++
				if buffer[position] != rune('r') {
					goto l109
				}
				position++
				{
					position111, tokenIndex111 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l111
					}
					position++
					goto l112
				l111:
					position, tokenIndex = position111, tokenIndex111
				}
			l112:
				if !_rules[rule_]() {
					goto l109
				}
				add(ruleQUARTERS, position110)
			}
			return true
		l109:
			position, tokenIndex = position109, tokenIndex109
			return false
		},
		/* 9 MONTHS <- <('m' 'o' 'n' 't' 'h' 's'? _)> */
		func() bool {
			position113, tokenIndex113 := position, tokenIndex
			{
				position114 := position
				if buffer[position] != rune('m') {
					goto l113
				}
				position++
				if buffer[position] != rune('o') {
					goto l113
				}
				position++
				if buffer[position] != rune('n') {
					goto l113
				}
				position++
				if buffer[position] != rune('t') {
					goto l113
				}
				position++
				if buffer[position] != rune('h') {
					goto l113
				}
				position++
				{
					position115, tokenIndex115 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l115
					}
					position++
					goto l116
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
			l116:
				if !_rules[rule_]() {
					goto l113
				}
				add(ruleMONTHS, position114)
			}
			return true
		l113:
			position, tokenIndex = position113, tokenIndex113
			return false
		},
		/* 10 WEEKS <- <('w' 'e' 'e' 'k' 's'? _)> */
		func() bool {
			position117, tokenIndex117 := position, tokenIndex
			{
				position118 := position
				if buffer[position] != rune('w') {
					goto l117
				}
				position++
				if buffer[position] != rune('e') {
					goto l117
				}
				position++
				if buffer[position] != rune('e') {
					goto l117
				}
				position++
				if buffer[position] != rune('k') {
					goto l117
				}
				position++
				{
					position119, tokenIndex119 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l119
					}
					position++
					goto l120
				l119:
					position, tokenIndex = position119, tokenIndex119
				}
			l120:
				if !_rules[rule_]() {
					goto l117
				}
				add(ruleWEEKS, position118)
			}
			return true
		l117:
			position, tokenIndex = position117, tokenIndex117
			return false
		},
		/* 11 LAST <- <((('l' 'a' 's' 't') / ('p' 'r' 'e' 'v' 'i' 'o' 'u' 's') / ('p' 'a' 's' 't')) _)> */
		func() bool {
			position121, tokenIndex121 := position, tokenIndex
			{
				position122 := position
				{
					position123, tokenIndex123 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l124
					}
					position++
					if buffer[position] != rune('a') {
						goto l124
					}
					position++
					if buffer[position] != rune('s') {
						goto l124
					}
					position++
					if buffer[position] != rune('t') {
						goto l124
					}
					position++
					goto l123
				l124:
					position, tokenIndex = position123, tokenIndex123
					if buffer[position] != rune('p') {
						goto l125
					}
					position++
					if buffer[position] != rune('r') {
						goto l125
					}
					position++
					if buffer[position] != rune('e') {
						goto l125
					}
					position++
					if buffer[position] != rune('v') {
						goto l125
					}
					position++
					if buffer[position] != rune('i') {
						goto l125
					}
					position++
					if buffer[position] != rune('o') {
						goto l125
					}
					position++
					if buffer[position] != rune('u') {
						goto l125
					}
					position++
					if buffer[position] != rune('s') {
						goto l125
					}
					position++
					goto l123
				l125:
					position, tokenIndex = position123, tokenIndex123
					if buffer[position] != rune('p') {
						goto l121
					}
					position++
					if buffer[position] != rune('a') {
						goto l121
					}
					position++
					if buffer[position] != rune('s') {
						goto l121
					}
					position++
					if buffer[position] != rune('t') {
						goto l121
					}
					position++
				}
			l123:
				if !_rules[rule_]() {
					goto l121
				}
				add(ruleLAST, position122)
			}
			return true
		l121:
			position, tokenIndex = position121, tokenIndex121
			return false
		},
		/* 12 CURRENT <- <('c' 'u' 'r' 'r' 'e' 'n' 't' _)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				if buffer[position] != rune('c') {
					goto l126
				}
				position++
				if buffer[position] != rune('u') {
					goto l126
				}
				position++
				if buffer[position] != rune('r') {
					goto l126
				}
				position++
				if buffer[position] != rune('r') {
					goto l126
				}
				position++
				if buffer[position] != rune('e') {
					goto l126
				}
				position++
				if buffer[position] != rune('n') {
					goto l126
				}
				position++
				if buffer[position] != rune('t') {
					goto l126
				}
				position++
				if !_rules[rule_]() {
					goto l126
				}
				add(ruleCURRENT, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 13 TODATE <- <('t' 'o' ' ' 'd' 'a' 't' 'e' _)> */
		func() bool {
			position128, tokenIndex128 := position, tokenIndex
			{
				position129 := position
				if buffer[position] != rune('t') {
					goto l128
				}
				position++
				if buffer[position] != rune('o') {
					goto l128
				}
				position++
				if buffer[position] != rune(' ') {
					goto l128
				}
				position++
				if buffer[position] != rune('d') {
					goto l128
				}
				position++
				if buffer[position] != rune('a') {
					goto l128
				}
				position++
				if buffer[position] != rune('t') {
					goto l128
				}
				position++
				if buffer[position] != rune('e') {
					goto l128
				}
				position++
				if !_rules[rule_]() {
					goto l128
				}
				add(ruleTODATE, position129)
			}
			return true
		l128:
			position, tokenIndex = position128, tokenIndex128
			return false
		},
		/* 14 NEXT <- <('n' 'e' 'x' 't' _)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if buffer[position] != rune('n') {
					goto l130
				}
				position++
				if buffer[position] != rune('e') {
					goto l130
				}
				position++
				if buffer[position] != rune('x') {
					goto l130
				}
				position++
				if buffer[position] != rune('t') {
					goto l130
				}
				position++
				if !_rules[rule_]() {
					goto l130
				}
				add(ruleNEXT, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 15 _ <- <Whitespace*> */
		func() bool {
			{
				position133 := position
			l134:
				{
					position135, tokenIndex135 := position, tokenIndex
					{
						position136 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l135
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l135
								}
								position++
							default:
								{
									position138 := position
									{
										position139, tokenIndex139 := position, tokenIndex
										if buffer[position] != rune('\r') {
											goto l140
										}
										position++
										if buffer[position] != rune('\n') {
											goto l140
										}
										position++
										goto l139
									l140:
										position, tokenIndex = position139, tokenIndex139
										if buffer[position] != rune('\n') {
											goto l141
										}
										position++
										goto l139
									l141:
										position, tokenIndex = position139, tokenIndex139
										if buffer[position] != rune('\r') {
											goto l135
										}
										position++
									}
								l139:
									add(ruleEOL, position138)
								}
							}
						}

						add(ruleWhitespace, position136)
					}
					goto l134
				l135:
					position, tokenIndex = position135, tokenIndex135
				}
				add(rule_, position133)
			}
			return true
		},
		/* 16 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 17 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		nil,
		/* 18 EOF <- <!.> */
		nil,
		/* 20 Action0 <- <{
			p.start, p.end = boundsYear(p.currentTime)
		}> */
		nil,
		/* 21 Action1 <- <{
			p.start, p.end = boundsQuarter(p.currentTime)
		}> */
		nil,
		/* 22 Action2 <- <{
			p.start, p.end = boundsMonth(p.currentTime)
		}> */
		nil,
		/* 23 Action3 <- <{
			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(-1*(p.number-1), 0, 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(-1, 0, 0)
			}
		}> */
		nil,
		/* 24 Action4 <- <{
			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -3*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0,-3,0)
			}
		}> */
		nil,
		/* 25 Action5 <- <{
			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -1*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, -1, 0)
			}
		}> */
		nil,
		/* 26 Action6 <- <{
			p.start, p.end = boundsWeek(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, 0, -7*(p.number-1))
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, 0, -7)
			}
		}> */
		nil,
		/* 27 Action7 <- <{
			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(p.number, 0, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(1, 0, 0)
			}
		}> */
		nil,
		/* 28 Action8 <- <{
			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0,3*(p.number),0)
			} else {
				p.start = p.start.AddDate(0,3,0)
				p.end = p.start.AddDate(0,3,0)
			}
		}> */
		nil,
		/* 29 Action9 <- <{
			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, p.number, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 1, 0)
			}
		}> */
		nil,
		/* 30 Action10 <- <{
			p.start, p.end = boundsWeek(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, 0, 7*p.number)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 0, 7)
			}
		}> */
		nil,
		/* 31 Action11 <- <{
			p.start = time.Time{}
			p.end = p.currentTime.Add(1<<63 -1)
		}> */
		nil,
		nil,
		/* 33 Action12 <- <{ n, _ := strconv.Atoi(text); p.number = n}> */
		nil,
		/* 34 Action13 <- <{ p.number = 1 }> */
		nil,
		/* 35 Action14 <- <{ p.number = 2 }> */
		nil,
		/* 36 Action15 <- <{ p.number = 3 }> */
		nil,
		/* 37 Action16 <- <{ p.number = 4 }> */
		nil,
		/* 38 Action17 <- <{ p.number = 5 }> */
		nil,
		/* 39 Action18 <- <{ p.number = 6 }> */
		nil,
		/* 40 Action19 <- <{ p.number = 7 }> */
		nil,
		/* 41 Action20 <- <{ p.number = 8 }> */
		nil,
		/* 42 Action21 <- <{ p.number = 9 }> */
		nil,
		/* 43 Action22 <- <{ p.number = 10 }> */
		nil,
		/* 44 Action23 <- <{ p.number = 11 }> */
		nil,
		/* 45 Action24 <- <{ p.number = 12 }> */
		nil,
		/* 46 Action25 <- <{ p.number = 13 }> */
		nil,
		/* 47 Action26 <- <{ p.number = 14 }> */
		nil,
		/* 48 Action27 <- <{ p.number = 15 }> */
		nil,
		/* 49 Action28 <- <{ p.number = 16 }> */
		nil,
		/* 50 Action29 <- <{ p.number = 17 }> */
		nil,
		/* 51 Action30 <- <{ p.number = 18 }> */
		nil,
		/* 52 Action31 <- <{ p.number = 19 }> */
		nil,
		/* 53 Action32 <- <{ p.number = 20 }> */
		nil,
	}
	p.rules = _rules
	return nil
}
